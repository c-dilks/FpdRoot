#include "PullRP.h"
//using namespace std;
ClassImp(PullRP)

namespace
{
  enum ew_enum {kE,kW}; // east west
  enum io_enum {kI,kO}; // inner outer
  enum ud_enum {kU,kD}; // up down
  enum ns_enum {kN,kS}; // north south

  // StEvent::TriggerData2013 crate configuration number is mapped to "root12fms crate number" in Qt.cxx,
  // subtract by 1 to use it an array index
  const Int_t MXQ_CRATE_CONF_NUM = 4; // root12fms crate num - 1 (see Qt.cxx)

  // PP001 is in slot 8 of MXQ crate, but subtract 5 since Qt code starts from slot 5,
  // then subtract 1 to use it as array index
  const Int_t RP_SLOT = 2;

};

PullRP::PullRP()
{
  // ADC thresholds
  ADCmin[0] = 97; // first minimum @ 111
  ADCmin[1] = 100; // first minimum @ 110
  ADCmin[2] = 100; // first minimum @ 113
  ADCmin[3] = 84; // first minimum @ ~90
  ADCmin[4] = 103; // first minimum @ 120
  ADCmin[5] = 83; // first minimum @ 90
  ADCmin[6] = 97; // first minimum @ 111
  ADCmin[7] = 97; // first minimum @ 116
  ADCmin[8] = 100; // first minimum @ 127 
  ADCmin[9] = 98; // first minimum @ 117
  ADCmin[10] = 102; // first minimum @ 124
  ADCmin[11] = 103; // first minimum @ 122
  ADCmin[12] = 131; // first minimum @ 175
  ADCmin[13] = 83; // first minimum @ 87
  ADCmin[14] = 110; // first minimum @ 130
  ADCmin[15] = 91; // first minimum @ ~102



  //calibration -- shift TAC peaks to ~1000 counts
  TACcalib[0]  = 553;
  TACcalib[1]  = 537;
  TACcalib[2]  = 528;
  TACcalib[3]  = 600;
  TACcalib[4]  = 628;
  TACcalib[5]  = 446;
  TACcalib[6]  = 491;
  TACcalib[7]  = 521;
  TACcalib[8]  = 338;
  TACcalib[9]  = 290;
  TACcalib[10] = 440;
  TACcalib[11] = 163;
  TACcalib[12] = 704;
  TACcalib[13] = 768;
  TACcalib[14] = 642;
  TACcalib[15] = 757;

  // uncomment to disable ADC and TAC calibrations
  //for(int i=0; i<16; i++) { ADCmin[i]=1; /* TACcalib[i]=0;*/ };


  PQt = 0;
  scale = 1.;//was 1.7



  for(int card=0; card<4; card++)
  {
    for(int halfcard=0; halfcard<2; halfcard++)
    {
      for(int chan4=0; chan4<4; chan4++)
      {
        bADCchan[card][halfcard][chan4] = 0;
        bTACchan[card][halfcard][chan4] = 0;
      };
    };
  };

  // PP001 inputs
  bADCchan[0][0][0] = EiunToIdx(kE,kO,kU,kN);
  bADCchan[0][0][1] = EiunToIdx(kE,kO,kU,kS);
  bADCchan[0][0][2] = EiunToIdx(kE,kO,kD,kS);
  bADCchan[0][0][3] = EiunToIdx(kE,kO,kD,kN);

  bADCchan[1][0][0] = EiunToIdx(kW,kO,kU,kS);
  bADCchan[1][0][1] = EiunToIdx(kW,kO,kU,kN);
  bADCchan[1][0][2] = EiunToIdx(kW,kO,kD,kN);
  bADCchan[1][0][3] = EiunToIdx(kW,kO,kD,kS);

  bADCchan[2][0][0] = EiunToIdx(kE,kI,kD,kS);
  bADCchan[2][0][1] = EiunToIdx(kE,kI,kD,kN);
  bADCchan[2][0][2] = EiunToIdx(kE,kI,kU,kN);
  bADCchan[2][0][3] = EiunToIdx(kE,kI,kU,kS);

  bADCchan[3][0][0] = EiunToIdx(kW,kI,kD,kN);
  bADCchan[3][0][1] = EiunToIdx(kW,kI,kD,kS);
  bADCchan[3][0][2] = EiunToIdx(kW,kI,kU,kS);
  bADCchan[3][0][3] = EiunToIdx(kW,kI,kU,kN);

  for(int card=0; card<4; card++)
  {
    for(int chan4=0; chan4<4; chan4++)
    {
      bTACchan[card][1][chan4] = bADCchan[card][0][chan4];
    };
  };

  iwmax=-1;
  iemax=-1;
}


void PullRP::GetADCTAC(Qt* pQt)
{
  PQt=pQt;

  // reset ADC and TAC arrays
  for(int cc=0; cc<16; cc++)
  {
    bADC[cc] = 0;
    bTAC[cc] = 0;
    bTACsynced[cc] = 0;
    bADCT[cc] = 0;
  };

  // read ADC and TAC from QT class
  for(qtchan=0; qtchan<32; qtchan++)
  {
    qtcard = qtchan / 8;
    qthalfcard = (qtchan % 8) / 4;
    qtchan4 = qtchan % 4;
    
    qadc=0;
    qtac=0;
    
    val =  PQt->qtadc[qtchan][RP_SLOT][MXQ_CRATE_CONF_NUM];
    tval = PQt->qttac[qtchan][RP_SLOT][MXQ_CRATE_CONF_NUM];

    if(val<0) val = 0;

    qadc = bADCchan[qtcard][qthalfcard][qtchan4];
    qtac = bTACchan[qtcard][qthalfcard][qtchan4];

    if(qthalfcard==0)
    {
      bADC[qadc] = val;
      bADCT[qadc] = tval;
    }
    else 
    {
      bTAC[qtac] = val;
      bTACsynced[qtac] = val - TACcalib[qtac];
    };
  };
};


Float_t PullRP::GetVertex()
{
  if(PQt==0)
  {
    vtx = -10000;
    return vtx;
  };

  MaxtacE=0;
  MaxtacW=0;
  iemax=-1;
  iwmax=-1;

  sE = SortByTime(kE); // index of sorted array
  sW = SortByTime(kW);

  NAboveAdcmin[kE] = sE.GetSize();
  NAboveAdcmin[kW] = sW.GetSize();

  if(NAboveAdcmin[kE]>0) { iemax=sE[0]; MaxtacE=bTACsynced[sE[0]]; };
  if(NAboveAdcmin[kW]>0) { iwmax=sW[0]; MaxtacW=bTACsynced[sW[0]]; };

  if(iemax<0 || iwmax<0) vtx = -10000;

  if(vtx<-9977) return vtx;

  vtx = (MaxtacE-MaxtacW) * scale;

  return vtx; 
};



TArrayI PullRP::SortByTime(int ew)
{
  if(ew<0 || ew>1) return TArrayI(0);
  Int_t ind[16];
  Int_t sortval[16];

  for(int j=0; j<16; j++)
  {
    sortval[j] = -10000;
    if(iEW(j)==ew)
    {
      if(bADC[j] > ADCmin[j]) sortval[j] = bTACsynced[j]; // we use "synced" TACs to do sorting
    };
    //printf("U Idx=%d ew=%d TACsynced=%d TAC=%d ADC=%d ADCmin=%d sortval=%d\n",
        //j,ew,bTACsynced[j],bTAC[j],bADC[j],ADCmin[j],sortval[j]); //+++
  };

  TMath::Sort(16,sortval,ind);


  int cnt=0;

  for(int j=0; j<16; j++)
  {
    if(sortval[ind[j]]>0) cnt++;
    //printf("S j=%d ind=%d ew=%d TACsynced=%d TAC=%d ADC=%d sortval=%d\n",
        //j,ind[j],ew,bTACsynced[ind[j]],bTAC[ind[j]],bADC[ind[j]],sortval[ind[j]]); //+++
  };
  //printf("iew=%d cnt=%d\n-------------------------------------------------\n",ew,cnt); //+++
  return TArrayI(cnt,ind);
};



void PullRP::UpdateQTRPinfo(QTRPInfo* qtrp,Qt* pqt)
{
  qtrp->SetZero();

  GetVertex(pqt);

  qtrp->NE=NAboveAdcmin[kE];
  qtrp->NW=NAboveAdcmin[kW];
  qtrp->vertex=vtx;

  int i;

  for(int j=0; j<NAboveAdcmin[kE]; j++)
  {
    i = sE[j];
    if(i>=0&&i<16)
    {
      qtrp->RPE_Idx[j]=i;
      qtrp->RPE_TAC[j]=bTAC[i];
      qtrp->RPE_ADC[j]=bADC[i];
    };
  };

  for(int j=0; j<NAboveAdcmin[kW]; j++)
  {
    i = sW[j];
    if(i>=0&&i<16)
    {
      qtrp->RPW_Idx[j]=i;
      qtrp->RPW_TAC[j]=bTAC[i];
      qtrp->RPW_ADC[j]=bADC[i];
    };
  };

  //qtrp->Print(); //+++;
};


void PullRP::IdxToEiun(Int_t idx0, Int_t &ew0, Int_t &io0, Int_t &ud0, Int_t &ns0)
{
  // Idx = 4 bits represinging [east/west] [inner/outer] [up/down] [north/south]
  ew0 = (idx0 >> 3) & 0x1;
  io0 = (idx0 >> 2) & 0x1;
  ud0 = (idx0 >> 1) & 0x1;
  ns0 = (idx0 >> 0) & 0x1;
};


Int_t PullRP::EiunToIdx(Int_t ew0, Int_t io0, Int_t ud0, Int_t ns0)
{
  return 8*ew0+4*io0+2*ud0+ns0;
};
