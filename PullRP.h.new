#ifndef PullRP_
#define PullRP_
#include "Qt.h"
#include "TArray.h"
#include "TMath.h"

class QTRPInfo : public TObject
{
  public:
    QTRPInfo(){};

    Char_t NE,NW;
    Char_t RPE_Idx[8];
    Short_t RPE_TAC[8];
    Short_t RPE_ADC[8];
    Short_t RPW_Idx[8];
    Short_t RPW_TAC[8];
    Short_t RPW_ADC[8];
    Float_t vertex;

    void Print()
    {
      printf("NE=%d NW=%d vertex=%f\n",NE,NW,vertex);
      for(int j=0; j<8; j++) 
      {
        printf(" RPE_Idx=%d RPE_ADC=%d RPE_TAC=%d\n",RPE_Idx[j],RPE_ADC[j],RPE_TAC[j]);
        printf(" RPW_Idx=%d RPW_ADC=%d RPW_TAC=%d\n",RPW_Idx[j],RPW_ADC[j],RPW_TAC[j]);
      };
    };
    void SetZero()
    {
      NE=NW=0;
      vertex=0;
      for(int j=0; j<8; j++) 
      {
        RPE_Idx[j]=0;
        RPE_ADC[j]=0;
        RPE_TAC[j]=0;
        RPW_Idx[j]=0;
        RPW_ADC[j]=0;
        RPW_TAC[j]=0;
      };
    };
  private:
    ClassDef(QTRPInfo,1);
};

class PullRP : public TObject
{
  public:
    PullRP();
    void GetADCTAC(Qt* pQt);

    int bADC[16];//ADC...[RP idx]
    int bTAC[16];//TAC...[RP idx]
    int bTACsynced[16];//TAC...[RP idx]
    int bADCT[16];//ADC...[RP idx]  (QT time of bADC)
    Qt* PQt;
    int bTACchan[4][2][4]; // [QT card] [0=first 4 channels / 1=last 4 channels] [channel in halfcard]
    int bADCchan[4][2][4]; // [QT card] [0=first 4 channels / 1=last 4 channels] [channel in halfcard]
    Float_t GetVertex();
    Float_t GetVertex(Qt* pQt)
    {
      GetADCTAC(pQt);
      return GetVertex();
    }
    TArrayI sE;
    TArrayI sW;
    TArrayI SortByTime(int iew);
    Int_t  ADCmin[16];
    Float_t MaxtacW;
    Float_t MaxtacE;
    Int_t iwmax;
    Int_t iemax;
    Float_t scale;//conversion from delta t to distance
    Float_t vtx;
    Float_t TACcalib[16];  
    Int_t NAboveAdcmin[2];//number for E/W
    void UpdateQTRPinfo(QTRPInfo* qtrp,Qt* pqt);
    void IdxToEiun(Int_t idx0, Int_t &ew0, Int_t &io0, Int_t &ud0, Int_t &ns0);
    Int_t EiunToIdx(Int_t ew0, Int_t io0, Int_t ud0, Int_t ns0);
    Int_t iEW(Int_t idx0) { return (Int_t)((idx0>>3)&0x1); };
    Int_t iIO(Int_t idx0) { return (Int_t)((idx0>>2)&0x1); };
    Int_t iUD(Int_t idx0) { return (Int_t)((idx0>>1)&0x1); };
    Int_t iNS(Int_t idx0) { return (Int_t)((idx0>>0)&0x1); };
  private:
    Int_t qtchan,qtcard,qthalfcard,qtchan4;
    Int_t qadc,qtac,val,tval;
    ClassDef(PullRP,1);

};
#endif
